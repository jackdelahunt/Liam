//100
//100
//20
//0
//

import "../../stdlib";

struct Vector<T> {
    x: T,
    y: ^T
}

fn vec<T>(v: Vector<T>) void {

}

fn generic_func<T, E>(t: T, e: ^E) ^E {
    return e;
}

fn get_u64_vector() Vector<u64> {
    let x := 20u64;
    let v := new Vector<u64>{x: x, y: @x};
    return v;
}

fn get_any_vector<T>() Vector<T> {
    let x: T = zero;
    let y := @x;
    return new Vector<T>{x: x, y: y};
}


fn main() void {
    let n := 100u64;
    let v: Vector<u64> = new Vector<u64>{x: n, y: @n};
    println::<u64>(v.x);
    println::<u64>(*(v.y));

    let s := "jack";
    generic_func::<u64, str>(100u64, @s);

    let u64_vector := get_u64_vector();
    println::<u64>(u64_vector.x);

    let bool_vector : Vector<bool> = get_any_vector::<bool>();
    println::<bool>(bool_vector.x);

    let str_vector := get_any_vector::<str>();
    println::<str>(str_vector.x);
}
