import "stdlib/basic.liam";

enum TokenType {
    NUMBER_LITERAL,
    STRING_LITERAL,
    IDENTIFIER,   
    LET, 
    INSERT,
    FN,   
    PAREN_OPEN, 
    PAREN_CLOSE, 
    BRACE_OPEN, 
    BRACE_CLOSE, 
    PLUS, 
    MINUS,
    STAR,
    SLASH, 
    MOD, 
    ASSIGN, 
    SEMI_COLON, 
    COMMA, 
    COLON, 
    RETURN, 
    HAT, 
    AT, 
    STRUCT, 
    DOT, 
    NEW, 
    BREAK, 
    IMPORT, 
    BRACKET_OPEN, 
    BRACKET_CLOSE, 
    FOR, 
    FALSE, 
    TRUE, 
    IF,
    ELSE, 
    OR,  
    AND,
    EQUAL, 
    NOT_EQUAL, 
    NOT, 
    LESS, 
    GREATER, 
    GREATER_EQUAL,
    LESS_EQUAL, 
    EXTERN, 
    BAR, 
    IS, 
    NULL_POINTER, 
    ENUM
}


struct Token {
    type: TokenType,
    string: str
}

struct Lexer {
    path: str,
    source: String,
    current: u64,
    tokens: Array[Token]
}

fn make_lexer(path: str): Lexer {
   return new Lexer {
        path: path,
        source: read(path),
        current: 0u64,
        tokens: make_array[Token]()
   }; 
}

fn lex(lexer: ^Lexer): void {
   for lexer.current = 0u64; lexer.current < len(lexer.source.string); lexer.current = lexer.current + 1u64; {
        let current_char := substr(lexer.source.string, lexer.current, 1u64);
        
        if current_char == "\n" or current_char == " " or current_char == "\r" or current_char == "\t" {
            
        }

        if current_char == ";" {
            array_append[Token](@lexer.tokens, new Token{
                type: TokenType.SEMI_COLON,
                string: ";"
            });
        }

        if current_char == "{" {
            array_append[Token](@lexer.tokens, new Token{
                type: TokenType.BRACE_OPEN,
                string: "{"
            });
        }

        if current_char == "}" {
            array_append[Token](@lexer.tokens, new Token{
                type: TokenType.BRACE_CLOSE,
                string: "{"
            });
        }

        if current_char == "[" {

        }

        if current_char == "]" {

        }


   }  
}

fn main(): void {
    set_allocator("malloc", 0u64);
    
    let lexer := make_lexer("/Users/jackdelahunt/Projects/Liam/liamc/selfhost/test.liam");
    lexer.current = 100u64;
    lex(@lexer);
}
